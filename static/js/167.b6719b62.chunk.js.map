{"version":3,"file":"static/js/167.b6719b62.chunk.js","mappings":"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","sources":["components/InteractiveContent/RevealCard/RevealCard.styled.jsx","components/Common/ToggleButton/ToggleButton.styled.jsx","components/Common/ToggleButton/ToggleButton.jsx","components/InteractiveContent/RevealCard/RevealCard.jsx","components/Common/SectionHeading/SectionHeading.styled.jsx","components/Common/SectionHeading/SectionHeading.jsx","components/Common/Card/Card.styled.jsx","components/Common/Card/Card.jsx","components/Sermons/Sermons.styled.jsx","components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.styled.jsx","components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.jsx","components/SpecificContentDisplays/SermonDisplay/SermonDisplay.styled.jsx","components/SpecificContentDisplays/SermonDisplay/SermonDisplay.jsx","components/Sermons/Sermons.jsx","pages/SermonsPage.jsx","components/InteractiveContent/QuizCard/QuizCard.styled.jsx","components/InteractiveContent/QuizCard/QuizCard.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledRevealCard = styled.div`\n  background-color: ${({ theme }) => theme.background}; // ✅ З теми\n  border: 1px solid ${({ theme }) => theme.borderColor}; // ✅ З теми\n  border-radius: ${({ theme }) => theme.borderRadius.medium}; // ✅ З теми\n  box-shadow: ${({ theme }) => theme.shadows.small}; // ✅ З теми\n  overflow: hidden; /* Щоб вміст не виходив за рамки */\n  transition: box-shadow 0.2s ease-in-out;\n  &:hover {\n    box-shadow: ${({ theme }) => theme.shadows.medium}; // ✅ З теми\n  }\n`;\n\nexport const CardTitle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem 1.5rem;\n  background-color: ${({ theme }) => theme.accentBg}; // ✅ З теми\n  color: ${({ theme }) => theme.buttonColor}; // ✅ З теми (для контрасту на accentBg)\n  font-weight: bold; /* Залишаємо, якщо не в темі */\n  font-size: ${({ theme }) => theme.fontSizes.large}; // ✅ З теми\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.accentBgHover || theme.accentBg}; // ✅ З теми\n  }\n\n  span:first-child {\n    /* Для емодзі */\n    margin-right: 0.75rem;\n    font-size: ${({ theme }) => theme.fontSizes.xlarge}; // ✅ З теми\n  }\n\n  a {\n    /* Стилі для посилань всередині заголовка картки */\n    color: ${({ theme }) => theme.buttonColor}; // ✅ З теми\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nexport const CardContent = styled.div`\n  padding: 1.5rem;\n  font-size: ${({ theme }) => theme.fontSizes.medium}; // ✅ З теми\n  color: ${({ theme }) => theme.color}; // ✅ З теми\n  line-height: 1.6;\n\n  p {\n    margin-bottom: 1rem;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  a {\n    color: ${({ theme }) => theme.accentColor}; // ✅ З теми\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  .bible-quote {\n    font-style: italic;\n    color: ${({ theme }) => theme.colorSecondary}; // ✅ З теми\n    margin-top: 0.5rem;\n    padding-left: 1rem;\n    border-left: 2px solid ${({ theme }) => theme.borderColor}; // ✅ З теми\n  }\n`;\n","// src/components/Common/ToggleButton/ToggleButton.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledToggleButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.2em;\n  cursor: pointer;\n  padding: 5px;\n\n  // Колір кнопки залежить від isActive, використовуючи кольори з теми\n  color: ${props =>\n    props.isActive\n      ? props.theme.accentColor\n      : props.theme.color}; /* Активний: акцентний колір; Неактивний: основний колір тексту */\n\n  // Переходи вже були, це чудово\n  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;\n  transform: ${props => (props.isActive ? \"rotate(180deg)\" : \"rotate(0deg)\")};\n\n  &:hover {\n    // Колір при наведенні також залежить від isActive та теми\n    // Можна використовувати theme.navActive або додати спеціальний toggleHoverColor до вашої теми\n    color: ${props =>\n      props.isActive\n        ? props.theme.navActive\n        : props.theme\n            .borderColor}; /* Приклад: Активний hover: колір navActive; Неактивний hover: колір borderColor */\n  }\n`;\n","// src/components/Common/ToggleButton/ToggleButton.js\nimport React from \"react\";\nimport { StyledToggleButton } from \"./ToggleButton.styled\";\n\nexport default function ToggleButton({ isActive, onClick }) {\n  return (\n    <StyledToggleButton onClick={onClick} isActive={isActive}>\n      {isActive ? \"▲\" : \"▼\"} {/* Можете використовувати іконки чи інший текст */}\n    </StyledToggleButton>\n  );\n}\n","// src/components/InteractiveContent/RevealCard/RevealCard.js\nimport React, { useState } from \"react\";\nimport { StyledRevealCard, CardContent, CardTitle } from \"./RevealCard.styled\";\nimport ToggleButton from \"../../Common/ToggleButton/ToggleButton\";\n\nexport default function RevealCard({ cardData }) {\n  const [isRevealed, setIsRevealed] = useState(false);\n\n  const toggleReveal = () => setIsRevealed(!isRevealed);\n\n  return (\n    <StyledRevealCard>\n      <CardTitle onClick={toggleReveal}>\n        {cardData.emoji}\n        {/* ✅ ВИПРАВЛЕНО: Рендеримо cardData.title безпосередньо */}\n        <span>{cardData.title}</span>\n        <ToggleButton isActive={isRevealed} onClick={toggleReveal} />\n      </CardTitle>\n      {isRevealed && (\n        // ✅ ВИПРАВЛЕНО: Рендеримо cardData.content безпосередньо\n        <CardContent>{cardData.content}</CardContent>\n      )}\n    </StyledRevealCard>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledHeading = styled.h3`\n  color: ${({ theme }) => theme.accentColor}; // ✅ Змінив на accentColor для заголовків секцій\n  font-weight: bold; /* Залишаємо, якщо не в темі */\n  margin-top: 2.5rem;\n  margin-bottom: 1.5rem;\n  line-height: 1.2;\n\n  ${props =>\n    props.size === \"default\" &&\n    `\n    font-size: ${props.theme.fontSizes.xlarge}; // ✅ З теми\n  `}\n\n  ${props =>\n    props.size === \"medium\" &&\n    `\n    font-size: ${props.theme.fontSizes.large}; // ✅ З теми\n  `}\n\n  a {\n    color: ${({ theme }) => theme.accentColor}; // ✅ З теми\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n","// src/components/Common/SectionHeading/SectionHeading.js\nimport React from \"react\";\nimport { StyledHeading } from \"./SectionHeading.styled\";\n\n// Компонент SectionHeading\nconst SectionHeading = ({ as = \"h3\", size = \"default\", children }) => {\n  return (\n    <StyledHeading as={as} size={size}>\n      {children} {/* ✅ ВИПРАВЛЕНО: Рендеримо children безпосередньо */}\n    </StyledHeading>\n  );\n};\n\nexport default SectionHeading;\n","import styled from \"styled-components\";\n\nexport const StyledCard = styled.section`\n  background-color: ${({ theme }) =>\n    theme.background}; /* Тепер використовує основний колір фону з теми */\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Тінь залишена без змін */\n  padding: 2rem;\n  margin-bottom: 2rem;\n\n  // ДОДАНО: Плавний перехід для фонового кольору та тіні\n  transition: background-color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;\n`;\n","import React from \"react\";\nimport { StyledCard } from \"./Card.styled\";\n\nexport default function Card({ children }) {\n  return <StyledCard>{children}</StyledCard>;\n}\n","// Припускається, що це файл для стилів сторінки, наприклад, SermonsPage.styled.jsx\n\nimport styled from \"styled-components\";\n\nexport const Container = styled.div`\n  // Цей компонент не має прямих властивостей кольору, які потрібно змінювати.\n  // Його фон та колір тексту, швидше за все, контролюються батьківськими компонентами\n  // (наприклад, Main, Wrapper у Layout) або глобальними стилями body, де переходи вже налаштовані.\n`;\n\nexport const Title = styled.h2`\n  color: ${({ theme }) => theme.color}; // Використано основний колір тексту з теми\n  text-align: center;\n  margin-bottom: 40px;\n  font-size: 2.5rem;\n\n  // ПЕРЕВІРЕНО: Перехід для 'color' вже визначено у GlobalStyles.js для всіх h2 елементів.\n  // Тому тут окремо його додавати не потрібно, він вже працює автоматично.\n`;\n\n// Новий styled component для повідомлення\nexport const NoSermonMessage = styled.p`\n  text-align: center;\n  color: ${({ theme }) => theme.color}; // Використано основний колір тексту з теми\n  margin-top: 2rem;\n  font-size: 1.15rem;\n\n  // ДОДАНО: Плавний перехід для кольору тексту, оскільки це <p>\n  transition: color 0.4s ease-in-out;\n`;\n","// src/components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.styled.js\nimport styled from \"styled-components\";\n\nexport const MetaContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n  font-size: 0.9em;\n  color: inherit; // Успадковує колір від батьківського компонента\n  transition: color 0.4s ease-in-out; // Забезпечує плавний перехід кольору\n\n  span {\n    white-space: nowrap; // Запобігає розриву тексту\n  }\n`;\n\nexport const MetaItem = styled.span`\n  /* Додаткові стилі для кожного елемента мета-інформації */\n`;\n\nexport const DescriptionText = styled.p`\n  margin-top: 20px;\n  max-width: 600px; /* Обмеження ширини для читабельності */\n  margin-left: auto;\n  margin-right: auto;\n  font-size: 1em;\n  line-height: 1.5;\n  opacity: 0.9; /* Трохи приглушений */\n  text-align: center; /* Центруємо опис */\n`;\n","// src/components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.js\nimport React from \"react\";\nimport { MetaContainer, MetaItem, DescriptionText } from \"./SermonMetaInfo.styled\";\n\nexport default function SermonMetaInfo({ speaker, date, theme, book, description }) {\n  return (\n    <MetaContainer>\n      {book && (\n        <MetaItem>\n          Книга: <strong>{book}</strong>\n        </MetaItem>\n      )}\n      {speaker && (\n        <MetaItem>\n          Спікер: <strong>{speaker}</strong>\n        </MetaItem>\n      )}\n      {date && <MetaItem>Дата: {date}</MetaItem>}\n      {theme && (\n        <MetaItem>\n          Тема: <strong>{theme}</strong>\n        </MetaItem>\n      )}\n      {description && <DescriptionText>{description}</DescriptionText>}\n    </MetaContainer>\n  );\n}\n","// src/components/SpecificContentDisplays/SermonDisplay/SermonDisplay.styled.js\nimport styled from \"styled-components\";\nimport { MetaContainer } from \"../SermonMetaInfo/SermonMetaInfo.styled\"; // Імпортуємо MetaContainer\n\nexport const SermonDisplayContainer = styled.div`\n  /* Загальні стилі для контейнера вмісту проповіді */\n  // Не має theme-залежних властивостей, які потребують transition.\n`;\n\nexport const SermonTitleWrapper = styled.div`\n  /* Нова стилізація для секції \"герой\" */\n  background: ${({ theme }) =>\n    theme.mode === \"light\"\n      ? `linear-gradient(135deg, ${theme.gradientStart} 0%, ${theme.gradientEnd} 100%)` // У світлій темі: дуже світлий градієнт\n      : `linear-gradient(135deg, ${theme.gradientStart} 0%, ${theme.gradientEnd} 100%)`}; /* У темній темі: градієнт залишається */\n  color: ${({ theme }) =>\n    theme.color}; /* Основний колір тексту теми (темний у світлій, світлий у темній) */\n  padding: 4rem 1rem;\n  text-align: center;\n  margin-bottom: 3rem;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n\n  // *** Цей рядок є ключовим для анімації цього компонента ***\n  // ЧУДОВО! Перехід вже налаштований і працює коректно для background та color.\n  transition: background 0.4s ease-in-out, color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;\n\n  /* Стилі для основного заголовка h2 всередині цього блоку */\n  h2 {\n    font-size: 2.8rem;\n    margin-bottom: 1rem;\n    line-height: 1.2;\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.05); // Дуже легка тінь для тексту\n    // Колір цього h2 буде успадковано від SermonTitleWrapper.\n    // Оскільки SermonTitleWrapper має transition: color, то і h2 буде плавно змінювати колір.\n  }\n\n  /* Регулювання стилів MetaContainer, коли він знаходиться всередині SermonTitleWrapper */\n  ${MetaContainer} {\n    margin-top: 2rem;\n    font-size: 1.1em;\n    // Колір буде успадковано від батьківського SermonTitleWrapper.\n    // Тому він також буде плавно змінюватися.\n  }\n\n  /* Медіа-запити для адаптивності */\n  @media (max-width: 768px) {\n    padding: 3rem 1rem;\n    h2 {\n      font-size: 2.2rem;\n    }\n    ${MetaContainer} {\n      font-size: 1em;\n    }\n  }\n`;\n\nexport const MainContentWrapper = styled.main`\n  max-width: 960px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 2rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  // Не має theme-залежних властивостей, які потребують transition.\n`;\n\nexport const SermonTextWrapper = styled.div`\n  color: ${({ theme }) => theme.color}; // Колір тексту проповіді з теми\n\n  // ДОДАНО: Плавний перехід для кольору тексту\n  transition: color 0.4s ease-in-out;\n`;\n\nexport const StyledParagraph = styled.p`\n  margin-bottom: 1rem;\n  font-size: 1.15rem;\n  line-height: 1.6;\n  // Колір цього параграфа буде успадковано від батьківського SermonTextWrapper.\n  // Оскільки SermonTextWrapper тепер має transition: color, то і параграф буде плавно змінювати колір.\n`;\n\nexport const RevealCardsGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1.5rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n  justify-items: center;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: 1024px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  // Не має theme-залежних властивостей, які потребують transition.\n`;\n","// src/components/SpecificContentDisplays/SermonDisplay/SermonDisplay.js\nimport React from \"react\";\nimport Card from \"../../Common/Card/Card\";\nimport SectionHeading from \"../../Common/SectionHeading/SectionHeading\";\nimport QuizCard from \"../../InteractiveContent/QuizCard/QuizCard\";\nimport RevealCard from \"../../InteractiveContent/RevealCard/RevealCard\";\nimport SermonMetaInfo from \"../SermonMetaInfo/SermonMetaInfo\";\n\nimport {\n  SermonDisplayContainer,\n  SermonTextWrapper,\n  StyledParagraph,\n  RevealCardsGrid,\n  SermonTitleWrapper,\n  MainContentWrapper,\n} from \"./SermonDisplay.styled\";\n\nfunction SermonDisplay({ sermonData }) {\n  if (!sermonData) {\n    return <p>Завантаження проповіді...</p>;\n  }\n\n  const { title, speaker, date, book, description, theme, sections } = sermonData;\n\n  return (\n    <SermonDisplayContainer>\n      <SermonTitleWrapper>\n        <h2>{title}</h2>\n        <SermonMetaInfo\n          speaker={speaker}\n          date={date}\n          theme={theme}\n          book={book}\n          description={description}\n        />\n      </SermonTitleWrapper>\n\n      <MainContentWrapper>\n        <Card>\n          <SermonTextWrapper>\n            {sections.map((section, index) => {\n              if (section.type === \"text\") {\n                return (\n                  <React.Fragment key={index}>\n                    {section.title && (\n                      <SectionHeading\n                        as={section.subtitle ? \"h4\" : \"h3\"}\n                        size={section.subtitle ? \"medium\" : \"default\"}\n                      >\n                        {section.title}\n                      </SectionHeading>\n                    )}\n\n                    {section.content.map((paragraph, pIndex) => (\n                      <StyledParagraph key={pIndex}>{paragraph}</StyledParagraph>\n                    ))}\n                  </React.Fragment>\n                );\n              } else if (section.type === \"quiz\") {\n                return <QuizCard key={section.id} quizData={section} />;\n              } else if (section.type === \"reveal-cards\") {\n                return (\n                  <RevealCardsGrid key={index}>\n                    {section.cards.map(card => (\n                      <RevealCard key={card.id} cardData={card} />\n                    ))}\n                  </RevealCardsGrid>\n                );\n              }\n              return null;\n            })}\n          </SermonTextWrapper>\n        </Card>\n      </MainContentWrapper>\n    </SermonDisplayContainer>\n  );\n}\n\nexport default SermonDisplay;\n","// src/components/Sermons/Sermons.jsx\nimport React, { useEffect } from \"react\";\nimport { Container, NoSermonMessage } from \"./Sermons.styled\";\nimport SermonDisplay from \"../SpecificContentDisplays/SermonDisplay/SermonDisplay\";\nimport { sermonsContent } from \"../../data/sermons/sermonsContent\"; // Переконайтесь, що цей шлях правильний\nimport { useSermons } from \"../../contexts/SermonsContext\";\n\n// Нова функція для отримання даних проповіді за її ID\nconst getSermonDataById = sermonId => {\n  if (!sermonId) return null;\n\n  // Проходимо по всіх категоріях (книги, тематичні, особливі) в sermonsContent\n  for (const categoryKey in sermonsContent) {\n    if (sermonsContent.hasOwnProperty(categoryKey)) {\n      const sermonsArray = sermonsContent[categoryKey];\n      // Перевіряємо, чи це масив і чи він не порожній\n      if (Array.isArray(sermonsArray) && sermonsArray.length > 0) {\n        const foundSermon = sermonsArray.find(sermon => sermon.id === sermonId);\n        if (foundSermon) {\n          return foundSermon;\n        }\n      }\n    }\n  }\n  return null; // Якщо проповідь з таким ID не знайдено\n};\n\nconst Sermons = () => {\n  const { selectedSermon, setSelectedSermon } = useSermons();\n\n  // Тепер використовуємо нову функцію пошуку за ID\n  const sermonData = getSermonDataById(selectedSermon);\n\n  useEffect(() => {\n    // Якщо жодна проповідь не обрана (при першому завантаженні або перезавантаженні)\n    if (!selectedSermon) {\n      // Знаходимо першу доступну проповідь для відображення за замовчуванням\n      let firstSermonId = null;\n      for (const categoryKey in sermonsContent) {\n        if (sermonsContent.hasOwnProperty(categoryKey)) {\n          const sermonsArray = sermonsContent[categoryKey];\n          if (Array.isArray(sermonsArray) && sermonsArray.length > 0) {\n            firstSermonId = sermonsArray[0].id; // Беремо ID першої проповіді з першої категорії\n            break; // Зупиняємо пошук після знаходження першої проповіді\n          }\n        }\n      }\n\n      if (firstSermonId) {\n        setSelectedSermon(firstSermonId); // Встановлюємо ID першої проповіді\n      }\n    }\n  }, [selectedSermon, setSelectedSermon]);\n\n  return (\n    <Container>\n      {sermonData ? (\n        <SermonDisplay sermonData={sermonData} />\n      ) : (\n        <NoSermonMessage>Будь ласка, оберіть проповідь зі списку в меню.</NoSermonMessage>\n      )}\n    </Container>\n  );\n};\n\nexport default Sermons;\n","import Sermons from \"../components/Sermons\";\n\nexport default function SermonsPage() {\n  return <Sermons />;\n}\n","// src/components/InteractiveContent/QuizCard/QuizCard.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledQuizCard = styled.div`\n  background-color: ${({ theme }) => theme.background}; // Основний фон картки\n  border: 1px solid ${({ theme }) => theme.borderColor}; // Межа картки\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); // Тінь залишена без змін\n\n  // ДОДАНО: Плавні переходи для фону та межі картки\n  transition: background-color 0.4s ease-in-out, border-color 0.4s ease-in-out;\n`;\n\nexport const QuizQuestion = styled.h4`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 15px;\n  color: ${({ theme }) => theme.color}; // Колір тексту запитання\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  // ПЕРЕВІРЕНО: Перехід для 'color' вже визначено у GlobalStyles.js для всіх h4 елементів.\n  // Тому тут окремо його додавати не потрібно, він вже працює.\n`;\n\nexport const QuizOptionsList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin-top: 15px;\n  border-top: 1px solid ${({ theme }) => theme.borderColor}; // Межа для списку опцій\n  padding-top: 15px;\n\n  // ДОДАНО: Плавний перехід для кольору верхньої межі списку опцій\n  transition: border-color 0.4s ease-in-out;\n`;\n\nexport const QuizOptionItem = styled.li`\n  background-color: ${({ theme }) => theme.background}; // Фон опції\n  border: 1px solid ${({ theme }) => theme.borderColor}; // Межа опції\n  border-radius: 5px;\n  padding: 10px 15px;\n  margin-bottom: 10px;\n  font-size: 1rem;\n  color: ${({ theme }) => theme.color}; // Колір тексту опції\n  cursor: pointer;\n\n  // ЧУДОВО! Переходи вже визначені тут, вони охоплюють всі зміни кольорів та фону\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.hoverBg}; // Колір фону при наведенні\n  }\n\n  // Стилі для обраної відповіді\n  ${props =>\n    props.isSelected &&\n    `\n    background-color: ${props.theme.accentBg}; // Акцентний фон для обраної\n    border-color: ${props.theme.accentColor}; // Акцентний колір межі для обраної\n    color: ${props.theme.buttonColor}; // Колір тексту для обраної (як buttonColor для контрасту)\n  `}\n\n  // Стилі для правильної відповіді, що відображаються ЛИШЕ ПІСЛЯ ВИБОРУ КОРИСТУВАЧЕМ\n  ${props =>\n    props.showFeedback &&\n    props.isCorrectOption &&\n    `\n    background-color: ${props.theme.successBg}; // Фон для правильної відповіді\n    border-color: ${props.theme.successColor}; // Межа для правильної відповіді\n    color: ${props.theme.successText}; // Текст для правильної відповіді\n    font-weight: bold;\n  `}\n\n  // Стилі для НЕПРАВИЛЬНОЇ відповіді, яку обрав користувач\n  ${props =>\n    props.showFeedback &&\n    props.isSelected &&\n    !props.isCorrectOption &&\n    `\n    background-color: ${props.theme.dangerBg}; // Фон для неправильної відповіді\n    border-color: ${props.theme.dangerColor}; // Межа для неправильної відповіді\n    color: ${props.theme.dangerText}; // Текст для неправильної відповіді\n  `}\n`;\n\nexport const QuizToggleIcon = styled.span`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: ${({ theme }) => theme.color}; // Колір іконки\n\n  // ДОДАНО: Перехід для кольору іконки (на додаток до transform)\n  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;\n`;\n","// src/components/InteractiveContent/QuizCard/QuizCard.js\nimport React, { useState } from \"react\";\nimport {\n  StyledQuizCard,\n  QuizQuestion,\n  QuizOptionsList,\n  QuizOptionItem,\n  QuizToggleIcon,\n} from \"./QuizCard.styled\";\n\nexport default function QuizCard({ quizData }) {\n  const [showOptions, setShowOptions] = useState(false);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null); // Новий стан для обраної відповіді\n\n  const toggleOptions = () => {\n    setShowOptions(!showOptions);\n    // Приховуємо вибрану відповідь, якщо знову закриваємо список\n    if (showOptions) {\n      setSelectedAnswerIndex(null);\n    }\n  };\n\n  const handleOptionClick = index => {\n    setSelectedAnswerIndex(index);\n    // Якщо хочете автоматично показувати результат після вибору, можна тут додати логіку\n    // Наразі просто фіксуємо вибір\n  };\n\n  return (\n    <StyledQuizCard>\n      <QuizQuestion onClick={toggleOptions}>\n        {quizData.question}\n        <QuizToggleIcon isActive={showOptions}>{showOptions ? \"−\" : \"+\"}</QuizToggleIcon>\n      </QuizQuestion>\n\n      {showOptions && (\n        <QuizOptionsList>\n          {quizData.options.map((option, index) => (\n            <QuizOptionItem\n              key={index}\n              onClick={() => handleOptionClick(index)} // Обробник кліку на опцію\n              isSelected={selectedAnswerIndex === index} // Проп для стилізації обраної відповіді\n              isCorrectOption={option.isCorrect} // Проп для стилізації правильної відповіді (не змінює поведінку, але впливає на вигляд)\n              showFeedback={selectedAnswerIndex !== null} // Показувати фідбек лише після вибору відповіді\n            >\n              {option.text}\n            </QuizOptionItem>\n          ))}\n        </QuizOptionsList>\n      )}\n    </StyledQuizCard>\n  );\n}\n"],"names":["StyledRevealCard","styled","div","_ref","theme","background","_ref2","borderColor","_ref3","borderRadius","medium","_ref4","shadows","small","_ref5","CardTitle","_ref6","accentBg","_ref7","buttonColor","_ref8","fontSizes","large","_ref9","accentBgHover","_ref0","xlarge","_ref1","CardContent","_ref10","_ref11","color","_ref12","accentColor","_ref13","colorSecondary","_ref14","StyledToggleButton","button","props","isActive","navActive","ToggleButton","onClick","_jsxs","children","RevealCard","cardData","isRevealed","setIsRevealed","useState","toggleReveal","emoji","_jsx","title","content","StyledHeading","h3","size","as","StyledCard","section","Card","Container","NoSermonMessage","h2","p","MetaContainer","MetaItem","span","DescriptionText","SermonMetaInfo","speaker","date","book","description","SermonDisplayContainer","SermonTitleWrapper","mode","gradientStart","gradientEnd","MainContentWrapper","main","SermonTextWrapper","StyledParagraph","RevealCardsGrid","sermonData","sections","map","index","type","React","SectionHeading","subtitle","paragraph","pIndex","QuizCard","quizData","id","cards","card","Sermons","selectedSermon","setSelectedSermon","useSermons","sermonId","categoryKey","sermonsContent","hasOwnProperty","sermonsArray","Array","isArray","length","foundSermon","find","sermon","getSermonDataById","useEffect","firstSermonId","SermonDisplay","SermonsPage","StyledQuizCard","QuizQuestion","h4","QuizOptionsList","ul","QuizOptionItem","li","hoverBg","isSelected","showFeedback","isCorrectOption","successBg","successColor","successText","dangerBg","dangerColor","dangerText","QuizToggleIcon","showOptions","setShowOptions","selectedAnswerIndex","setSelectedAnswerIndex","toggleOptions","question","options","option","handleOptionClick","isCorrect","text"],"sourceRoot":""}