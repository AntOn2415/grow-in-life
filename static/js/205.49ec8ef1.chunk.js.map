{"version":3,"file":"static/js/205.49ec8ef1.chunk.js","mappings":"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","sources":["components/Common/Card/Card.styled.jsx","components/Common/Card/Card.jsx","components/InteractiveContent/QuizCard/QuizCard.styled.jsx","components/InteractiveContent/QuizCard/QuizCard.jsx","components/HomeGroups/HomeGroups.styled.jsx","components/SpecificContentDisplays/HomeGroupLessonMetaInfo/HomeGroupLessonMetaInfo.jsx","components/SpecificContentDisplays/HomeGroupLessonDisplay/HomeGroupLessonDisplay.styled.jsx","components/SpecificContentDisplays/HomeGroupLessonDisplay/HomeGroupLessonDisplay.jsx","components/HomeGroups/HomeGroups.jsx","pages/HomeGroupsPage.jsx","components/Common/SectionHeading/SectionHeading.styled.jsx","components/Common/SectionHeading/SectionHeading.jsx","components/InteractiveContent/RevealCard/RevealCard.styled.jsx","components/Common/ToggleButton/ToggleButton.styled.jsx","components/Common/ToggleButton/ToggleButton.jsx","components/InteractiveContent/RevealCard/RevealCard.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledCard = styled.section`\n  background-color: ${({ theme }) =>\n    theme.background}; /* Тепер використовує основний колір фону з теми */\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Тінь залишена без змін */\n  padding: 2rem;\n  margin-bottom: 2rem;\n\n  // ДОДАНО: Плавний перехід для фонового кольору та тіні\n  transition: background-color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;\n`;\n","import React from \"react\";\nimport { StyledCard } from \"./Card.styled\";\n\nexport default function Card({ children }) {\n  return <StyledCard>{children}</StyledCard>;\n}\n","// src/components/InteractiveContent/QuizCard/QuizCard.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledQuizCard = styled.div`\n  background-color: ${({ theme }) => theme.background}; // Основний фон картки\n  border: 1px solid ${({ theme }) => theme.borderColor}; // Межа картки\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); // Тінь залишена без змін\n\n  // ДОДАНО: Плавні переходи для фону та межі картки\n  transition: background-color 0.4s ease-in-out, border-color 0.4s ease-in-out;\n`;\n\nexport const QuizQuestion = styled.h4`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 15px;\n  color: ${({ theme }) => theme.color}; // Колір тексту запитання\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  // ПЕРЕВІРЕНО: Перехід для 'color' вже визначено у GlobalStyles.js для всіх h4 елементів.\n  // Тому тут окремо його додавати не потрібно, він вже працює.\n`;\n\nexport const QuizOptionsList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin-top: 15px;\n  border-top: 1px solid ${({ theme }) => theme.borderColor}; // Межа для списку опцій\n  padding-top: 15px;\n\n  // ДОДАНО: Плавний перехід для кольору верхньої межі списку опцій\n  transition: border-color 0.4s ease-in-out;\n`;\n\nexport const QuizOptionItem = styled.li`\n  background-color: ${({ theme }) => theme.background}; // Фон опції\n  border: 1px solid ${({ theme }) => theme.borderColor}; // Межа опції\n  border-radius: 5px;\n  padding: 10px 15px;\n  margin-bottom: 10px;\n  font-size: 1rem;\n  color: ${({ theme }) => theme.color}; // Колір тексту опції\n  cursor: pointer;\n\n  // ЧУДОВО! Переходи вже визначені тут, вони охоплюють всі зміни кольорів та фону\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.hoverBg}; // Колір фону при наведенні\n  }\n\n  // Стилі для обраної відповіді\n  ${props =>\n    props.isSelected &&\n    `\n    background-color: ${props.theme.accentBg}; // Акцентний фон для обраної\n    border-color: ${props.theme.accentColor}; // Акцентний колір межі для обраної\n    color: ${props.theme.buttonColor}; // Колір тексту для обраної (як buttonColor для контрасту)\n  `}\n\n  // Стилі для правильної відповіді, що відображаються ЛИШЕ ПІСЛЯ ВИБОРУ КОРИСТУВАЧЕМ\n  ${props =>\n    props.showFeedback &&\n    props.isCorrectOption &&\n    `\n    background-color: ${props.theme.successBg}; // Фон для правильної відповіді\n    border-color: ${props.theme.successColor}; // Межа для правильної відповіді\n    color: ${props.theme.successText}; // Текст для правильної відповіді\n    font-weight: bold;\n  `}\n\n  // Стилі для НЕПРАВИЛЬНОЇ відповіді, яку обрав користувач\n  ${props =>\n    props.showFeedback &&\n    props.isSelected &&\n    !props.isCorrectOption &&\n    `\n    background-color: ${props.theme.dangerBg}; // Фон для неправильної відповіді\n    border-color: ${props.theme.dangerColor}; // Межа для неправильної відповіді\n    color: ${props.theme.dangerText}; // Текст для неправильної відповіді\n  `}\n`;\n\nexport const QuizToggleIcon = styled.span`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: ${({ theme }) => theme.color}; // Колір іконки\n\n  // ДОДАНО: Перехід для кольору іконки (на додаток до transform)\n  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;\n`;\n","// src/components/InteractiveContent/QuizCard/QuizCard.js\nimport React, { useState } from \"react\";\nimport {\n  StyledQuizCard,\n  QuizQuestion,\n  QuizOptionsList,\n  QuizOptionItem,\n  QuizToggleIcon,\n} from \"./QuizCard.styled\";\n\nexport default function QuizCard({ quizData }) {\n  const [showOptions, setShowOptions] = useState(false);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null); // Новий стан для обраної відповіді\n\n  const toggleOptions = () => {\n    setShowOptions(!showOptions);\n    // Приховуємо вибрану відповідь, якщо знову закриваємо список\n    if (showOptions) {\n      setSelectedAnswerIndex(null);\n    }\n  };\n\n  const handleOptionClick = index => {\n    setSelectedAnswerIndex(index);\n    // Якщо хочете автоматично показувати результат після вибору, можна тут додати логіку\n    // Наразі просто фіксуємо вибір\n  };\n\n  return (\n    <StyledQuizCard>\n      <QuizQuestion onClick={toggleOptions}>\n        {quizData.question}\n        <QuizToggleIcon isActive={showOptions}>{showOptions ? \"−\" : \"+\"}</QuizToggleIcon>\n      </QuizQuestion>\n\n      {showOptions && (\n        <QuizOptionsList>\n          {quizData.options.map((option, index) => (\n            <QuizOptionItem\n              key={index}\n              onClick={() => handleOptionClick(index)} // Обробник кліку на опцію\n              isSelected={selectedAnswerIndex === index} // Проп для стилізації обраної відповіді\n              isCorrectOption={option.isCorrect} // Проп для стилізації правильної відповіді (не змінює поведінку, але впливає на вигляд)\n              showFeedback={selectedAnswerIndex !== null} // Показувати фідбек лише після вибору відповіді\n            >\n              {option.text}\n            </QuizOptionItem>\n          ))}\n        </QuizOptionsList>\n      )}\n    </StyledQuizCard>\n  );\n}\n","// src/components/HomeGroups/HomeGroups.styled.jsx\nimport styled from \"styled-components\";\n\n// Перейменовуємо Container на HomeGroupsContainer\nexport const HomeGroupsContainer = styled.div`\n  /* Ваші існуючі стилі для контейнера */\n`;\n\n// Перейменовуємо NoSermonMessage на NoLessonMessage\nexport const NoLessonMessage = styled.p`\n  /* Ваші існуючі стилі для повідомлення */\n  text-align: center;\n  margin-top: 50px;\n  font-size: 1.2rem;\n  color: ${({ theme }) => theme.colorSecondary};\n`;\n","// src/components/SpecificContentDisplays/HomeGroupLessonMetaInfo/HomeGroupLessonMetaInfo.jsx\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst MetaInfoContainer = styled.div`\n  // Цю назву можна залишити або змінити на HomeGroupLessonMetaInfoContainer\n  font-size: 0.95rem;\n  color: ${({ theme }) => theme.colorSecondary};\n  margin-top: 15px;\n\n  p {\n    margin: 5px 0;\n  }\n\n  span {\n    font-weight: bold;\n    color: ${({ theme }) => theme.color};\n  }\n\n  .lesson-tags {\n    margin-top: 10px;\n    span {\n      display: inline-block;\n      background-color: ${({ theme }) => theme.tagBg};\n      color: ${({ theme }) => theme.tagColor};\n      padding: 4px 8px;\n      border-radius: 4px;\n      margin-right: 8px;\n      margin-bottom: 5px;\n      font-size: 0.85rem;\n    }\n  }\n`;\n\n// Замість LessonMetaInfo використовуємо HomeGroupLessonMetaInfo\nfunction HomeGroupLessonMetaInfo({ author, book, chapter, verses, date, duration, theme, tags }) {\n  return (\n    <MetaInfoContainer>\n      {author && (\n        <p>\n          Автор: <span>{author}</span>\n        </p>\n      )}\n      {(book || chapter || verses) && (\n        <p>\n          Книга:{\" \"}\n          <span>\n            {book} {chapter ? `глава ${chapter}` : \"\"}\n            {verses ? `, вірші ${verses}` : \"\"}\n          </span>\n        </p>\n      )}\n      {date && (\n        <p>\n          Дата: <span>{date}</span>\n        </p>\n      )}\n      {duration && (\n        <p>\n          Тривалість: <span>{duration}</span>\n        </p>\n      )}\n      {theme && (\n        <p>\n          Тема: <span>{theme}</span>\n        </p>\n      )}\n      {tags && tags.length > 0 && (\n        <div className=\"lesson-tags\">\n          {tags.map((tag, index) => (\n            <span key={index}>{tag}</span>\n          ))}\n        </div>\n      )}\n    </MetaInfoContainer>\n  );\n}\n\nexport default HomeGroupLessonMetaInfo;\n","// src/components/SpecificContentDisplays/HomeGroupLessonDisplay/HomeGroupLessonDisplay.styled.jsx\nimport styled from \"styled-components\";\n\n// Замість LessonDisplayContainer використовуємо HomeGroupLessonDisplayContainer\nexport const HomeGroupLessonDisplayContainer = styled.div`\n  padding: 20px;\n  max-width: 900px;\n  margin: 0 auto;\n  background-color: ${({ theme }) => theme.background};\n  color: ${({ theme }) => theme.color};\n  min-height: calc(100vh - var(--header-height, 60px));\n`;\n\n// Замість LessonTitleWrapper використовуємо HomeGroupLessonTitleWrapper\nexport const HomeGroupLessonTitleWrapper = styled.div`\n  text-align: center;\n  margin-bottom: 30px;\n  h2 {\n    font-size: 2.5rem;\n    color: ${({ theme }) => theme.accentColor};\n    margin-bottom: 10px;\n    line-height: 1.2;\n  }\n`;\n\nexport const MainContentWrapper = styled.div`\n  /* Можливо, тут будуть додаткові стилі для контейнера з картою, якщо потрібно */\n`;\n\n// Замість LessonTextWrapper використовуємо HomeGroupLessonTextWrapper\nexport const HomeGroupLessonTextWrapper = styled.div`\n  line-height: 1.7;\n  font-size: 1.1rem;\n\n  p {\n    margin-bottom: 1em;\n  }\n\n  h3 {\n    font-size: 1.8rem;\n    color: ${({ theme }) => theme.color};\n    margin-top: 30px;\n    margin-bottom: 15px;\n  }\n\n  h4 {\n    font-size: 1.4rem;\n    color: ${({ theme }) => theme.color};\n    margin-top: 25px;\n    margin-bottom: 10px;\n  }\n\n  strong {\n    font-weight: bold;\n    color: ${({ theme }) => theme.accentColor};\n  }\n`;\n\nexport const StyledParagraph = styled.p`\n  /* Додаткові стилі для параграфів, якщо потрібно */\n`;\n\nexport const RevealCardsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 20px;\n  margin-top: 25px;\n  margin-bottom: 30px;\n  padding: 15px;\n  background-color: ${({ theme }) => theme.cardBackground};\n  border-radius: 8px;\n  box-shadow: ${({ theme }) => theme.shadow};\n`;\n","// src/components/SpecificContentDisplays/HomeGroupLessonDisplay/HomeGroupLessonDisplay.js\nimport React from \"react\";\nimport Card from \"../../Common/Card/Card\";\nimport SectionHeading from \"../../Common/SectionHeading/SectionHeading\";\nimport QuizCard from \"../../InteractiveContent/QuizCard/QuizCard\";\nimport RevealCard from \"../../InteractiveContent/RevealCard/RevealCard\";\n// ✅ ЗМІНЕНО: Імпорт нового компонента метаінформації\nimport HomeGroupLessonMetaInfo from \"../HomeGroupLessonMetaInfo/HomeGroupLessonMetaInfo\";\n\nimport {\n  HomeGroupLessonDisplayContainer, // ✅ ЗМІНЕНО: Імпортуємо нові назви стилів\n  HomeGroupLessonTextWrapper, // ✅ ЗМІНЕНО\n  StyledParagraph,\n  RevealCardsGrid,\n  HomeGroupLessonTitleWrapper, // ✅ ЗМІНЕНО\n  MainContentWrapper,\n} from \"./HomeGroupLessonDisplay.styled\"; // ✅ ЗМІНЕНО: Шлях до стилів\n\n// ✅ ЗМІНЕНО: Назва компонента та props\nfunction HomeGroupLessonDisplay({ lessonData }) {\n  if (!lessonData) {\n    return <p>Завантаження уроку домашньої групи...</p>; // ✅ ЗМІНЕНО\n  }\n\n  const {\n    title,\n    author,\n    book,\n    chapter,\n    verses,\n    date,\n    duration,\n    theme,\n    tags,\n    description,\n    sections,\n  } = lessonData;\n\n  const renderHtmlContent = htmlString => {\n    return { __html: htmlString };\n  };\n\n  return (\n    <HomeGroupLessonDisplayContainer>\n      {\" \"}\n      {/* ✅ ЗМІНЕНО */}\n      <HomeGroupLessonTitleWrapper>\n        {\" \"}\n        {/* ✅ ЗМІНЕНО */}\n        <h2>{title}</h2>\n        {/* ✅ ЗМІНЕНО: Використовуємо HomeGroupLessonMetaInfo */}\n        <HomeGroupLessonMetaInfo\n          author={author}\n          book={book}\n          chapter={chapter}\n          verses={verses}\n          date={date}\n          duration={duration}\n          theme={theme}\n          tags={tags}\n        />\n      </HomeGroupLessonTitleWrapper>\n      <MainContentWrapper>\n        <Card>\n          <HomeGroupLessonTextWrapper>\n            {\" \"}\n            {/* ✅ ЗМІНЕНО */}\n            {description && (\n              <StyledParagraph dangerouslySetInnerHTML={renderHtmlContent(description)} />\n            )}\n            {sections.map((section, index) => {\n              if (section.type === \"text\") {\n                return (\n                  <React.Fragment key={index}>\n                    {section.title && (\n                      <SectionHeading\n                        as={section.subtitle ? \"h4\" : \"h3\"}\n                        size={section.subtitle ? \"medium\" : \"default\"}\n                      >\n                        {section.title}\n                      </SectionHeading>\n                    )}\n                    {section.content.map((paragraph, pIndex) => (\n                      <StyledParagraph\n                        key={pIndex}\n                        dangerouslySetInnerHTML={renderHtmlContent(paragraph)}\n                      />\n                    ))}\n                  </React.Fragment>\n                );\n              } else if (section.type === \"quiz\") {\n                return <QuizCard key={section.id} quizData={section} />;\n              } else if (section.type === \"reveal-cards\") {\n                return (\n                  <RevealCardsGrid key={index}>\n                    {section.cards.map(card => (\n                      <RevealCard key={card.id} cardData={card} />\n                    ))}\n                  </RevealCardsGrid>\n                );\n              }\n              return null;\n            })}\n          </HomeGroupLessonTextWrapper>\n        </Card>\n      </MainContentWrapper>\n    </HomeGroupLessonDisplayContainer>\n  );\n}\n\nexport default HomeGroupLessonDisplay; // ✅ ЗМІНЕНО\n","// src/components/HomeGroups/HomeGroups.jsx\nimport React, { useEffect, useState } from \"react\"; // ✅ ДОДАНО useState\nimport { HomeGroupsContainer, NoLessonMessage } from \"./HomeGroups.styled\";\nimport HomeGroupLessonDisplay from \"../SpecificContentDisplays/HomeGroupLessonDisplay/HomeGroupLessonDisplay\";\nimport { homeGroupsContent } from \"../../data/homeGroups/homeGroupsContent\";\nimport { useHomeGroups } from \"../../contexts/HomeGroupsContext\";\n\nconst getLessonMetaDataById = lessonId => {\n  // ✅ ЗМІНЕНО НАЗВУ: тепер отримуємо метадані\n  if (!lessonId) return null;\n\n  for (const categoryKey in homeGroupsContent) {\n    if (homeGroupsContent.hasOwnProperty(categoryKey)) {\n      const lessonsArray = homeGroupsContent[categoryKey];\n      if (Array.isArray(lessonsArray) && lessonsArray.length > 0) {\n        const foundLesson = lessonsArray.find(lesson => lesson.id === lessonId);\n        if (foundLesson) {\n          return foundLesson; // Повертаємо об'єкт з метаданими та loadLesson\n        }\n      }\n    }\n  }\n  return null;\n};\n\nconst HomeGroups = () => {\n  const { selectedHomeGroupLesson, setSelectedHomeGroupLesson } = useHomeGroups();\n  const [loadedLessonContent, setLoadedLessonContent] = useState(null); // ✅ НОВИЙ СТАН: для зберігання завантаженого уроку\n  const [loading, setLoading] = useState(true); // ✅ НОВИЙ СТАН: для індикації завантаження\n\n  // Отримуємо метадані обраного уроку (з loadLesson функцією)\n  const selectedLessonMetaData = getLessonMetaDataById(selectedHomeGroupLesson);\n\n  useEffect(() => {\n    // Встановлюємо перший урок за замовчуванням, якщо жоден не вибрано\n    if (!selectedHomeGroupLesson) {\n      let firstLessonId = null;\n      for (const categoryKey in homeGroupsContent) {\n        if (homeGroupsContent.hasOwnProperty(categoryKey)) {\n          const lessonsArray = homeGroupsContent[categoryKey];\n          if (Array.isArray(lessonsArray) && lessonsArray.length > 0) {\n            firstLessonId = lessonsArray[0].id;\n            break;\n          }\n        }\n      }\n      if (firstLessonId) {\n        setSelectedHomeGroupLesson(firstLessonId);\n      } else {\n        setLoading(false); // Якщо немає уроків взагалі\n      }\n    }\n  }, [selectedHomeGroupLesson, setSelectedHomeGroupLesson]);\n\n  // ✅ НОВИЙ useEffect для завантаження контенту уроку\n  useEffect(() => {\n    const loadLessonContent = async () => {\n      setLoading(true); // Починаємо завантаження\n      setLoadedLessonContent(null); // Очищаємо попередній контент\n\n      if (selectedLessonMetaData && selectedLessonMetaData.loadLesson) {\n        try {\n          const module = await selectedLessonMetaData.loadLesson();\n          // Припускаємо, що module.default містить об'єкт уроку (як nehemiah4.js)\n          setLoadedLessonContent(module.default);\n        } catch (error) {\n          console.error(\"Помилка завантаження уроку:\", error);\n          setLoadedLessonContent(null); // У випадку помилки скидаємо контент\n        } finally {\n          setLoading(false); // Завершуємо завантаження\n        }\n      } else {\n        setLoading(false); // Немає метаданих або функції loadLesson\n      }\n    };\n\n    if (selectedHomeGroupLesson) {\n      // Запускаємо завантаження, лише якщо selectedHomeGroupLesson встановлено\n      loadLessonContent();\n    }\n  }, [selectedLessonMetaData, selectedHomeGroupLesson]); // Залежності: зміни метаданих або ID обраного уроку\n\n  return (\n    <HomeGroupsContainer>\n      {loading ? (\n        <NoLessonMessage>Завантаження уроку...</NoLessonMessage> // Показати, поки урок завантажується\n      ) : loadedLessonContent ? (\n        <HomeGroupLessonDisplay lessonData={loadedLessonContent} /> // Передаємо завантажений контент\n      ) : (\n        <NoLessonMessage>\n          Будь ласка, оберіть урок домашньої групи зі списку в меню.\n        </NoLessonMessage>\n      )}\n    </HomeGroupsContainer>\n  );\n};\n\nexport default HomeGroups;\n","import HomeGroups from \"../components/HomeGroups\";\n\nexport default function HomeGroupsPage() {\n  return <HomeGroups />;\n}\n","// src/components/Common/SectionHeading/SectionHeading.styled.js\nimport styled, { css } from \"styled-components\";\n\nexport const StyledSectionTitle = styled.h3`\n  color: ${({ theme }) => theme.color};\n  font-weight: 700;\n  margin-bottom: 1rem;\n  margin-top: 1.5rem;\n\n  // ДОДАНО: Плавні переходи для кольору та розміру шрифту\n  transition: color 0.4s ease-in-out, font-size 0.3s ease-in-out;\n\n  /* Визначення розмірів на основі prop 'size' */\n  ${props =>\n    props.size === \"small\" &&\n    css`\n      font-size: 1rem;\n    `}\n  ${props =>\n    props.size === \"medium\" &&\n    css`\n      font-size: 1.25rem;\n    `}\n  ${props =>\n    props.size === \"default\" &&\n    css`\n      font-size: 1.5rem;\n    `}\n  ${props =>\n    props.size === \"large\" &&\n    css`\n      font-size: 2.25rem;\n      margin-bottom: ${props => props.bottomMargin || \"1rem\"};\n    `}\n  ${props =>\n    props.size === \"extraLarge\" &&\n    css`\n      /* Додано для головного заголовка проповіді */\n      font-size: 2.5rem; /* Розмір з вашого h1 */\n      margin-bottom: ${props => props.bottomMargin || \"1rem\"};\n    `}\n\n  /* Визначення кольору на основі prop 'color' */\n  ${props =>\n    props.color === \"white\" &&\n    css`\n      /* Залишаємо опцію, якщо десь знадобиться білий текст */\n      color: white; /* Залишено як white, оскільки це явний override */\n      // Якщо color:white встановлюється через пропси, і ви хочете анімувати цей перехід,\n      // то глобальний transition на color вже спрацює.\n    `}\n\n  /* Вирівнювання тексту на основі prop 'alignment' */\n  ${props =>\n    props.alignment === \"center\" &&\n    css`\n      text-align: center;\n    `}\n`;\n","import React from \"react\";\nimport { StyledSectionTitle } from \"./SectionHeading.styled\";\n\nexport default function SectionHeading({ as, size, alignment, color, bottomMargin, children }) {\n  return (\n    <StyledSectionTitle\n      as={as}\n      size={size}\n      alignment={alignment}\n      color={color}\n      bottomMargin={bottomMargin}\n    >\n      {children}\n    </StyledSectionTitle>\n  );\n}\n","// src/components/InteractiveContent/RevealCard/RevealCard.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledRevealCard = styled.div`\n  background-color: ${({ theme }) => theme.navBg}; // Використано колір фону навігації для картки\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); // Тінь залишена без змін\n  width: 100%;\n  max-width: 320px; /* Для гарного відображення у сітці */\n  cursor: pointer;\n\n  // ОНОВЛЕНО: Більш специфічний перехід.\n  // 0.4s для зміни фону (з темою), 0.3s для тіні (наведення).\n  transition: background-color 0.4s ease-in-out, box-shadow 0.3s ease;\n\n  &:hover {\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); // Тінь при наведенні залишена без змін\n  }\n`;\n\nexport const CardTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.color}; // Колір заголовка з теми\n  font-size: 1.1em;\n\n  // ДОДАНО: Плавний перехід для кольору заголовка (оскільки це div, а не h-тег)\n  transition: color 0.4s ease-in-out;\n`;\n\nexport const CardContent = styled.div`\n  padding: 0 20px 15px;\n  color: ${({ theme }) => theme.color}; // Колір тексту контенту з теми\n  font-size: 0.95em;\n  line-height: 1.5;\n\n  // ДОДАНО: Плавний перехід для кольору контенту\n  transition: color 0.4s ease-in-out;\n`;\n","// src/components/Common/ToggleButton/ToggleButton.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledToggleButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.2em;\n  cursor: pointer;\n  padding: 5px;\n\n  // Колір кнопки залежить від isActive, використовуючи кольори з теми\n  color: ${props =>\n    props.isActive\n      ? props.theme.accentColor\n      : props.theme.color}; /* Активний: акцентний колір; Неактивний: основний колір тексту */\n\n  // Переходи вже були, це чудово\n  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;\n  transform: ${props => (props.isActive ? \"rotate(180deg)\" : \"rotate(0deg)\")};\n\n  &:hover {\n    // Колір при наведенні також залежить від isActive та теми\n    // Можна використовувати theme.navActive або додати спеціальний toggleHoverColor до вашої теми\n    color: ${props =>\n      props.isActive\n        ? props.theme.navActive\n        : props.theme\n            .borderColor}; /* Приклад: Активний hover: колір navActive; Неактивний hover: колір borderColor */\n  }\n`;\n","// src/components/Common/ToggleButton/ToggleButton.js\nimport React from \"react\";\nimport { StyledToggleButton } from \"./ToggleButton.styled\";\n\nexport default function ToggleButton({ isActive, onClick }) {\n  return (\n    <StyledToggleButton onClick={onClick} isActive={isActive}>\n      {isActive ? \"▲\" : \"▼\"} {/* Можете використовувати іконки чи інший текст */}\n    </StyledToggleButton>\n  );\n}\n","// src/components/InteractiveContent/RevealCard/RevealCard.js\nimport React, { useState } from \"react\";\nimport { StyledRevealCard, CardContent, CardTitle } from \"./RevealCard.styled\";\nimport ToggleButton from \"../../Common/ToggleButton/ToggleButton\"; // Переконайтеся, що ToggleButton існує\n\nexport default function RevealCard({ cardData }) {\n  const [isRevealed, setIsRevealed] = useState(false);\n\n  const toggleReveal = () => setIsRevealed(!isRevealed);\n\n  return (\n    <StyledRevealCard>\n      <CardTitle onClick={toggleReveal}>\n        {cardData.emoji} {cardData.title}\n        <ToggleButton isActive={isRevealed} onClick={toggleReveal} />\n      </CardTitle>\n      {isRevealed && <CardContent>{cardData.content}</CardContent>}\n    </StyledRevealCard>\n  );\n}\n"],"names":["StyledCard","styled","section","_ref","theme","background","Card","children","_jsx","StyledQuizCard","div","_ref2","borderColor","QuizQuestion","h4","_ref3","color","QuizOptionsList","ul","_ref4","QuizOptionItem","li","_ref5","_ref6","_ref7","_ref8","hoverBg","props","isSelected","accentBg","accentColor","buttonColor","showFeedback","isCorrectOption","successBg","successColor","successText","dangerBg","dangerColor","dangerText","QuizToggleIcon","span","_ref9","QuizCard","quizData","showOptions","setShowOptions","useState","selectedAnswerIndex","setSelectedAnswerIndex","_jsxs","onClick","toggleOptions","question","isActive","options","map","option","index","handleOptionClick","isCorrect","text","HomeGroupsContainer","NoLessonMessage","p","colorSecondary","MetaInfoContainer","tagBg","tagColor","author","book","chapter","verses","date","duration","tags","length","className","tag","HomeGroupLessonDisplayContainer","HomeGroupLessonTitleWrapper","MainContentWrapper","HomeGroupLessonTextWrapper","StyledParagraph","RevealCardsGrid","cardBackground","shadow","lessonData","title","description","sections","renderHtmlContent","htmlString","__html","HomeGroupLessonMetaInfo","dangerouslySetInnerHTML","type","React","SectionHeading","as","subtitle","size","content","paragraph","pIndex","id","cards","card","RevealCard","cardData","HomeGroups","selectedHomeGroupLesson","setSelectedHomeGroupLesson","useHomeGroups","loadedLessonContent","setLoadedLessonContent","loading","setLoading","selectedLessonMetaData","lessonId","categoryKey","homeGroupsContent","hasOwnProperty","lessonsArray","Array","isArray","foundLesson","find","lesson","getLessonMetaDataById","useEffect","firstLessonId","async","loadLesson","module","default","error","console","loadLessonContent","HomeGroupLessonDisplay","HomeGroupsPage","StyledSectionTitle","h3","css","bottomMargin","alignment","StyledRevealCard","navBg","CardTitle","CardContent","StyledToggleButton","button","navActive","ToggleButton","isRevealed","setIsRevealed","toggleReveal","emoji"],"sourceRoot":""}