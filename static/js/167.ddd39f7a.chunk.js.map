{"version":3,"file":"static/js/167.ddd39f7a.chunk.js","mappings":"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","sources":["components/Common/Card/Card.styled.jsx","components/Common/Card/Card.jsx","components/InteractiveContent/QuizCard/QuizCard.styled.jsx","components/InteractiveContent/QuizCard/QuizCard.jsx","components/Sermons/Sermons.styled.jsx","components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.styled.jsx","components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.jsx","components/SpecificContentDisplays/SermonDisplay/SermonDisplay.styled.jsx","components/SpecificContentDisplays/SermonDisplay/SermonDisplay.jsx","components/Sermons/Sermons.jsx","pages/SermonsPage.jsx","components/Common/SectionHeading/SectionHeading.styled.jsx","components/Common/SectionHeading/SectionHeading.jsx","components/InteractiveContent/RevealCard/RevealCard.styled.jsx","components/Common/ToggleButton/ToggleButton.styled.jsx","components/Common/ToggleButton/ToggleButton.jsx","components/InteractiveContent/RevealCard/RevealCard.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledCard = styled.section`\n  background-color: ${({ theme }) =>\n    theme.background}; /* Тепер використовує основний колір фону з теми */\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Тінь залишена без змін */\n  padding: 2rem;\n  margin-bottom: 2rem;\n\n  // ДОДАНО: Плавний перехід для фонового кольору та тіні\n  transition: background-color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;\n`;\n","import React from \"react\";\nimport { StyledCard } from \"./Card.styled\";\n\nexport default function Card({ children }) {\n  return <StyledCard>{children}</StyledCard>;\n}\n","// src/components/InteractiveContent/QuizCard/QuizCard.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledQuizCard = styled.div`\n  background-color: ${({ theme }) => theme.background}; // Основний фон картки\n  border: 1px solid ${({ theme }) => theme.borderColor}; // Межа картки\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); // Тінь залишена без змін\n\n  // ДОДАНО: Плавні переходи для фону та межі картки\n  transition: background-color 0.4s ease-in-out, border-color 0.4s ease-in-out;\n`;\n\nexport const QuizQuestion = styled.h4`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 15px;\n  color: ${({ theme }) => theme.color}; // Колір тексту запитання\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  // ПЕРЕВІРЕНО: Перехід для 'color' вже визначено у GlobalStyles.js для всіх h4 елементів.\n  // Тому тут окремо його додавати не потрібно, він вже працює.\n`;\n\nexport const QuizOptionsList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin-top: 15px;\n  border-top: 1px solid ${({ theme }) => theme.borderColor}; // Межа для списку опцій\n  padding-top: 15px;\n\n  // ДОДАНО: Плавний перехід для кольору верхньої межі списку опцій\n  transition: border-color 0.4s ease-in-out;\n`;\n\nexport const QuizOptionItem = styled.li`\n  background-color: ${({ theme }) => theme.background}; // Фон опції\n  border: 1px solid ${({ theme }) => theme.borderColor}; // Межа опції\n  border-radius: 5px;\n  padding: 10px 15px;\n  margin-bottom: 10px;\n  font-size: 1rem;\n  color: ${({ theme }) => theme.color}; // Колір тексту опції\n  cursor: pointer;\n\n  // ЧУДОВО! Переходи вже визначені тут, вони охоплюють всі зміни кольорів та фону\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.hoverBg}; // Колір фону при наведенні\n  }\n\n  // Стилі для обраної відповіді\n  ${props =>\n    props.isSelected &&\n    `\n    background-color: ${props.theme.accentBg}; // Акцентний фон для обраної\n    border-color: ${props.theme.accentColor}; // Акцентний колір межі для обраної\n    color: ${props.theme.buttonColor}; // Колір тексту для обраної (як buttonColor для контрасту)\n  `}\n\n  // Стилі для правильної відповіді, що відображаються ЛИШЕ ПІСЛЯ ВИБОРУ КОРИСТУВАЧЕМ\n  ${props =>\n    props.showFeedback &&\n    props.isCorrectOption &&\n    `\n    background-color: ${props.theme.successBg}; // Фон для правильної відповіді\n    border-color: ${props.theme.successColor}; // Межа для правильної відповіді\n    color: ${props.theme.successText}; // Текст для правильної відповіді\n    font-weight: bold;\n  `}\n\n  // Стилі для НЕПРАВИЛЬНОЇ відповіді, яку обрав користувач\n  ${props =>\n    props.showFeedback &&\n    props.isSelected &&\n    !props.isCorrectOption &&\n    `\n    background-color: ${props.theme.dangerBg}; // Фон для неправильної відповіді\n    border-color: ${props.theme.dangerColor}; // Межа для неправильної відповіді\n    color: ${props.theme.dangerText}; // Текст для неправильної відповіді\n  `}\n`;\n\nexport const QuizToggleIcon = styled.span`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: ${({ theme }) => theme.color}; // Колір іконки\n\n  // ДОДАНО: Перехід для кольору іконки (на додаток до transform)\n  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;\n`;\n","// src/components/InteractiveContent/QuizCard/QuizCard.js\nimport React, { useState } from \"react\";\nimport {\n  StyledQuizCard,\n  QuizQuestion,\n  QuizOptionsList,\n  QuizOptionItem,\n  QuizToggleIcon,\n} from \"./QuizCard.styled\";\n\nexport default function QuizCard({ quizData }) {\n  const [showOptions, setShowOptions] = useState(false);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null); // Новий стан для обраної відповіді\n\n  const toggleOptions = () => {\n    setShowOptions(!showOptions);\n    // Приховуємо вибрану відповідь, якщо знову закриваємо список\n    if (showOptions) {\n      setSelectedAnswerIndex(null);\n    }\n  };\n\n  const handleOptionClick = index => {\n    setSelectedAnswerIndex(index);\n    // Якщо хочете автоматично показувати результат після вибору, можна тут додати логіку\n    // Наразі просто фіксуємо вибір\n  };\n\n  return (\n    <StyledQuizCard>\n      <QuizQuestion onClick={toggleOptions}>\n        {quizData.question}\n        <QuizToggleIcon isActive={showOptions}>{showOptions ? \"−\" : \"+\"}</QuizToggleIcon>\n      </QuizQuestion>\n\n      {showOptions && (\n        <QuizOptionsList>\n          {quizData.options.map((option, index) => (\n            <QuizOptionItem\n              key={index}\n              onClick={() => handleOptionClick(index)} // Обробник кліку на опцію\n              isSelected={selectedAnswerIndex === index} // Проп для стилізації обраної відповіді\n              isCorrectOption={option.isCorrect} // Проп для стилізації правильної відповіді (не змінює поведінку, але впливає на вигляд)\n              showFeedback={selectedAnswerIndex !== null} // Показувати фідбек лише після вибору відповіді\n            >\n              {option.text}\n            </QuizOptionItem>\n          ))}\n        </QuizOptionsList>\n      )}\n    </StyledQuizCard>\n  );\n}\n","// Припускається, що це файл для стилів сторінки, наприклад, SermonsPage.styled.jsx\n\nimport styled from \"styled-components\";\n\nexport const Container = styled.div`\n  // Цей компонент не має прямих властивостей кольору, які потрібно змінювати.\n  // Його фон та колір тексту, швидше за все, контролюються батьківськими компонентами\n  // (наприклад, Main, Wrapper у Layout) або глобальними стилями body, де переходи вже налаштовані.\n`;\n\nexport const Title = styled.h2`\n  color: ${({ theme }) => theme.color}; // Використано основний колір тексту з теми\n  text-align: center;\n  margin-bottom: 40px;\n  font-size: 2.5rem;\n\n  // ПЕРЕВІРЕНО: Перехід для 'color' вже визначено у GlobalStyles.js для всіх h2 елементів.\n  // Тому тут окремо його додавати не потрібно, він вже працює автоматично.\n`;\n\n// Новий styled component для повідомлення\nexport const NoSermonMessage = styled.p`\n  text-align: center;\n  color: ${({ theme }) => theme.color}; // Використано основний колір тексту з теми\n  margin-top: 2rem;\n  font-size: 1.15rem;\n\n  // ДОДАНО: Плавний перехід для кольору тексту, оскільки це <p>\n  transition: color 0.4s ease-in-out;\n`;\n","// src/components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.styled.js\nimport styled from \"styled-components\";\n\nexport const MetaContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n  font-size: 0.9em;\n  color: inherit; // Успадковує колір від батьківського компонента\n  transition: color 0.4s ease-in-out; // Забезпечує плавний перехід кольору\n\n  span {\n    white-space: nowrap; // Запобігає розриву тексту\n  }\n`;\n\nexport const MetaItem = styled.span`\n  /* Додаткові стилі для кожного елемента мета-інформації */\n`;\n\nexport const DescriptionText = styled.p`\n  margin-top: 20px;\n  max-width: 600px; /* Обмеження ширини для читабельності */\n  margin-left: auto;\n  margin-right: auto;\n  font-size: 1em;\n  line-height: 1.5;\n  opacity: 0.9; /* Трохи приглушений */\n  text-align: center; /* Центруємо опис */\n`;\n","// src/components/SpecificContentDisplays/SermonMetaInfo/SermonMetaInfo.js\nimport React from \"react\";\nimport { MetaContainer, MetaItem, DescriptionText } from \"./SermonMetaInfo.styled\";\n\nexport default function SermonMetaInfo({ speaker, date, theme, book, description }) {\n  return (\n    <MetaContainer>\n      {book && (\n        <MetaItem>\n          Книга: <strong>{book}</strong>\n        </MetaItem>\n      )}\n      {speaker && (\n        <MetaItem>\n          Спікер: <strong>{speaker}</strong>\n        </MetaItem>\n      )}\n      {date && <MetaItem>Дата: {date}</MetaItem>}\n      {theme && (\n        <MetaItem>\n          Тема: <strong>{theme}</strong>\n        </MetaItem>\n      )}\n      {description && <DescriptionText>{description}</DescriptionText>}\n    </MetaContainer>\n  );\n}\n","// src/components/SpecificContentDisplays/SermonDisplay/SermonDisplay.styled.js\nimport styled from \"styled-components\";\nimport { MetaContainer } from \"../SermonMetaInfo/SermonMetaInfo.styled\"; // Імпортуємо MetaContainer\n\nexport const SermonDisplayContainer = styled.div`\n  /* Загальні стилі для контейнера вмісту проповіді */\n  // Не має theme-залежних властивостей, які потребують transition.\n`;\n\nexport const SermonTitleWrapper = styled.div`\n  /* Нова стилізація для секції \"герой\" */\n  background: ${({ theme }) =>\n    theme.mode === \"light\"\n      ? `linear-gradient(135deg, ${theme.gradientStart} 0%, ${theme.gradientEnd} 100%)` // У світлій темі: дуже світлий градієнт\n      : `linear-gradient(135deg, ${theme.gradientStart} 0%, ${theme.gradientEnd} 100%)`}; /* У темній темі: градієнт залишається */\n  color: ${({ theme }) =>\n    theme.color}; /* Основний колір тексту теми (темний у світлій, світлий у темній) */\n  padding: 4rem 1rem;\n  text-align: center;\n  margin-bottom: 3rem;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n\n  // *** Цей рядок є ключовим для анімації цього компонента ***\n  // ЧУДОВО! Перехід вже налаштований і працює коректно для background та color.\n  transition: background 0.4s ease-in-out, color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;\n\n  /* Стилі для основного заголовка h2 всередині цього блоку */\n  h2 {\n    font-size: 2.8rem;\n    margin-bottom: 1rem;\n    line-height: 1.2;\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.05); // Дуже легка тінь для тексту\n    // Колір цього h2 буде успадковано від SermonTitleWrapper.\n    // Оскільки SermonTitleWrapper має transition: color, то і h2 буде плавно змінювати колір.\n  }\n\n  /* Регулювання стилів MetaContainer, коли він знаходиться всередині SermonTitleWrapper */\n  ${MetaContainer} {\n    margin-top: 2rem;\n    font-size: 1.1em;\n    // Колір буде успадковано від батьківського SermonTitleWrapper.\n    // Тому він також буде плавно змінюватися.\n  }\n\n  /* Медіа-запити для адаптивності */\n  @media (max-width: 768px) {\n    padding: 3rem 1rem;\n    h2 {\n      font-size: 2.2rem;\n    }\n    ${MetaContainer} {\n      font-size: 1em;\n    }\n  }\n`;\n\nexport const MainContentWrapper = styled.main`\n  max-width: 960px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 2rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  // Не має theme-залежних властивостей, які потребують transition.\n`;\n\nexport const SermonTextWrapper = styled.div`\n  color: ${({ theme }) => theme.color}; // Колір тексту проповіді з теми\n\n  // ДОДАНО: Плавний перехід для кольору тексту\n  transition: color 0.4s ease-in-out;\n`;\n\nexport const StyledParagraph = styled.p`\n  margin-bottom: 1rem;\n  font-size: 1.15rem;\n  line-height: 1.6;\n  // Колір цього параграфа буде успадковано від батьківського SermonTextWrapper.\n  // Оскільки SermonTextWrapper тепер має transition: color, то і параграф буде плавно змінювати колір.\n`;\n\nexport const RevealCardsGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1.5rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n  justify-items: center;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: 1024px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  // Не має theme-залежних властивостей, які потребують transition.\n`;\n","// src/components/SpecificContentDisplays/SermonDisplay/SermonDisplay.js\nimport React from \"react\";\nimport Card from \"../../Common/Card/Card\";\nimport SectionHeading from \"../../Common/SectionHeading/SectionHeading\"; // Залишаємо для інших заголовків\nimport QuizCard from \"../../InteractiveContent/QuizCard/QuizCard\";\nimport RevealCard from \"../../InteractiveContent/RevealCard/RevealCard\";\nimport SermonMetaInfo from \"../SermonMetaInfo/SermonMetaInfo\";\n\nimport {\n  SermonDisplayContainer,\n  SermonTextWrapper,\n  StyledParagraph,\n  RevealCardsGrid,\n  SermonTitleWrapper,\n  MainContentWrapper,\n} from \"./SermonDisplay.styled\";\n\nfunction SermonDisplay({ sermonData }) {\n  if (!sermonData) {\n    return <p>Завантаження проповіді...</p>;\n  }\n\n  // Деструктуризуємо нові властивості: book, description\n  const { title, speaker, date, book, description, theme, sections } = sermonData;\n\n  const renderHtmlContent = htmlString => {\n    return { __html: htmlString };\n  };\n\n  return (\n    <SermonDisplayContainer>\n      <SermonTitleWrapper>\n        {/* Використовуємо прямий h2 для основного заголовка проповіді */}\n        <h2>{title}</h2>\n        {/* Передаємо нові властивості до SermonMetaInfo */}\n        <SermonMetaInfo\n          speaker={speaker}\n          date={date}\n          theme={theme}\n          book={book}\n          description={description}\n        />\n      </SermonTitleWrapper>\n\n      <MainContentWrapper>\n        <Card>\n          <SermonTextWrapper>\n            {sections.map((section, index) => {\n              if (section.type === \"text\") {\n                return (\n                  <React.Fragment key={index}>\n                    {section.title && (\n                      <SectionHeading\n                        as={section.subtitle ? \"h4\" : \"h3\"}\n                        size={section.subtitle ? \"medium\" : \"default\"}\n                      >\n                        {section.title}\n                      </SectionHeading>\n                    )}\n                    {section.content.map((paragraph, pIndex) => (\n                      <StyledParagraph\n                        key={pIndex}\n                        dangerouslySetInnerHTML={renderHtmlContent(paragraph)}\n                      />\n                    ))}\n                  </React.Fragment>\n                );\n              } else if (section.type === \"quiz\") {\n                return <QuizCard key={section.id} quizData={section} />;\n              } else if (section.type === \"reveal-cards\") {\n                return (\n                  <RevealCardsGrid key={index}>\n                    {section.cards.map(card => (\n                      <RevealCard key={card.id} cardData={card} />\n                    ))}\n                  </RevealCardsGrid>\n                );\n              }\n              return null;\n            })}\n          </SermonTextWrapper>\n        </Card>\n      </MainContentWrapper>\n    </SermonDisplayContainer>\n  );\n}\nexport default SermonDisplay;\n","// src/components/Sermons/Sermons.jsx\nimport React, { useEffect } from \"react\";\nimport { Container, NoSermonMessage } from \"./Sermons.styled\";\nimport SermonDisplay from \"../SpecificContentDisplays/SermonDisplay/SermonDisplay\";\nimport { sermonsContent } from \"../../data/sermons/sermonsContent\"; // Переконайтесь, що цей шлях правильний\nimport { useSermons } from \"../../contexts/SermonsContext\";\n\n// Нова функція для отримання даних проповіді за її ID\nconst getSermonDataById = sermonId => {\n  if (!sermonId) return null;\n\n  // Проходимо по всіх категоріях (книги, тематичні, особливі) в sermonsContent\n  for (const categoryKey in sermonsContent) {\n    if (sermonsContent.hasOwnProperty(categoryKey)) {\n      const sermonsArray = sermonsContent[categoryKey];\n      // Перевіряємо, чи це масив і чи він не порожній\n      if (Array.isArray(sermonsArray) && sermonsArray.length > 0) {\n        const foundSermon = sermonsArray.find(sermon => sermon.id === sermonId);\n        if (foundSermon) {\n          return foundSermon;\n        }\n      }\n    }\n  }\n  return null; // Якщо проповідь з таким ID не знайдено\n};\n\nconst Sermons = () => {\n  const { selectedSermon, setSelectedSermon } = useSermons();\n\n  // Тепер використовуємо нову функцію пошуку за ID\n  const sermonData = getSermonDataById(selectedSermon);\n\n  useEffect(() => {\n    // Якщо жодна проповідь не обрана (при першому завантаженні або перезавантаженні)\n    if (!selectedSermon) {\n      // Знаходимо першу доступну проповідь для відображення за замовчуванням\n      let firstSermonId = null;\n      for (const categoryKey in sermonsContent) {\n        if (sermonsContent.hasOwnProperty(categoryKey)) {\n          const sermonsArray = sermonsContent[categoryKey];\n          if (Array.isArray(sermonsArray) && sermonsArray.length > 0) {\n            firstSermonId = sermonsArray[0].id; // Беремо ID першої проповіді з першої категорії\n            break; // Зупиняємо пошук після знаходження першої проповіді\n          }\n        }\n      }\n\n      if (firstSermonId) {\n        setSelectedSermon(firstSermonId); // Встановлюємо ID першої проповіді\n      }\n    }\n  }, [selectedSermon, setSelectedSermon]);\n\n  return (\n    <Container>\n      {sermonData ? (\n        <SermonDisplay sermonData={sermonData} />\n      ) : (\n        <NoSermonMessage>Будь ласка, оберіть проповідь зі списку в меню.</NoSermonMessage>\n      )}\n    </Container>\n  );\n};\n\nexport default Sermons;\n","import Sermons from \"../components/Sermons\";\n\nexport default function SermonsPage() {\n  return <Sermons />;\n}\n","import styled from \"styled-components\";\n\nexport const StyledHeading = styled.h3`\n  color: ${({ theme }) => theme.accentColor}; // ✅ Змінив на accentColor для заголовків секцій\n  font-weight: bold; /* Залишаємо, якщо не в темі */\n  margin-top: 2.5rem;\n  margin-bottom: 1.5rem;\n  line-height: 1.2;\n\n  ${props =>\n    props.size === \"default\" &&\n    `\n    font-size: ${props.theme.fontSizes.xlarge}; // ✅ З теми\n  `}\n\n  ${props =>\n    props.size === \"medium\" &&\n    `\n    font-size: ${props.theme.fontSizes.large}; // ✅ З теми\n  `}\n\n  a {\n    color: ${({ theme }) => theme.accentColor}; // ✅ З теми\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n","// src/components/Common/SectionHeading/SectionHeading.js\nimport React from \"react\";\nimport { StyledHeading } from \"./SectionHeading.styled\"; // ✅ Імпортуємо стилі\n// import DOMPurify from 'dompurify'; // Розкоментуйте, якщо використовуєте DOMPurify\n\n// Компонент SectionHeading\nconst SectionHeading = ({ as = \"h3\", size = \"default\", children }) => {\n  // Функція для безпечного рендерингу HTML\n  const renderHtmlContent = htmlString => {\n    // Якщо ви використовуєте DOMPurify, розкоментуйте рядок нижче\n    // return { __html: DOMPurify.sanitize(htmlString) };\n    return { __html: htmlString };\n  };\n\n  return (\n    <StyledHeading\n      as={as}\n      size={size}\n      // Застосовуємо dangerouslySetInnerHTML до children, оскільки це може бути HTML-рядок\n      dangerouslySetInnerHTML={renderHtmlContent(children)}\n    />\n  );\n};\n\nexport default SectionHeading;\n","import styled from \"styled-components\";\n\nexport const StyledRevealCard = styled.div`\n  background-color: ${({ theme }) => theme.background}; // ✅ З теми\n  border: 1px solid ${({ theme }) => theme.borderColor}; // ✅ З теми\n  border-radius: ${({ theme }) => theme.borderRadius.medium}; // ✅ З теми\n  box-shadow: ${({ theme }) => theme.shadows.small}; // ✅ З теми\n  overflow: hidden; /* Щоб вміст не виходив за рамки */\n  transition: box-shadow 0.2s ease-in-out;\n\n  &:hover {\n    box-shadow: ${({ theme }) => theme.shadows.medium}; // ✅ З теми\n  }\n`;\n\nexport const CardTitle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem 1.5rem;\n  background-color: ${({ theme }) => theme.accentBg}; // ✅ З теми\n  color: ${({ theme }) => theme.buttonColor}; // ✅ З теми (для контрасту на accentBg)\n  font-weight: bold; /* Залишаємо, якщо не в темі */\n  font-size: ${({ theme }) => theme.fontSizes.large}; // ✅ З теми\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.accentBgHover || theme.accentBg}; // ✅ З теми\n  }\n\n  span:first-child {\n    /* Для емодзі */\n    margin-right: 0.75rem;\n    font-size: ${({ theme }) => theme.fontSizes.xlarge}; // ✅ З теми\n  }\n\n  a {\n    /* Стилі для посилань всередині заголовка картки */\n    color: ${({ theme }) => theme.buttonColor}; // ✅ З теми\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nexport const CardContent = styled.div`\n  padding: 1.5rem;\n  font-size: ${({ theme }) => theme.fontSizes.medium}; // ✅ З теми\n  color: ${({ theme }) => theme.color}; // ✅ З теми\n  line-height: 1.6;\n\n  p {\n    margin-bottom: 1rem;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  a {\n    color: ${({ theme }) => theme.accentColor}; // ✅ З теми\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  .bible-quote {\n    font-style: italic;\n    color: ${({ theme }) => theme.colorSecondary}; // ✅ З теми\n    margin-top: 0.5rem;\n    padding-left: 1rem;\n    border-left: 2px solid ${({ theme }) => theme.borderColor}; // ✅ З теми\n  }\n`;\n","// src/components/Common/ToggleButton/ToggleButton.styled.js\nimport styled from \"styled-components\";\n\nexport const StyledToggleButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.2em;\n  cursor: pointer;\n  padding: 5px;\n\n  // Колір кнопки залежить від isActive, використовуючи кольори з теми\n  color: ${props =>\n    props.isActive\n      ? props.theme.accentColor\n      : props.theme.color}; /* Активний: акцентний колір; Неактивний: основний колір тексту */\n\n  // Переходи вже були, це чудово\n  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;\n  transform: ${props => (props.isActive ? \"rotate(180deg)\" : \"rotate(0deg)\")};\n\n  &:hover {\n    // Колір при наведенні також залежить від isActive та теми\n    // Можна використовувати theme.navActive або додати спеціальний toggleHoverColor до вашої теми\n    color: ${props =>\n      props.isActive\n        ? props.theme.navActive\n        : props.theme\n            .borderColor}; /* Приклад: Активний hover: колір navActive; Неактивний hover: колір borderColor */\n  }\n`;\n","// src/components/Common/ToggleButton/ToggleButton.js\nimport React from \"react\";\nimport { StyledToggleButton } from \"./ToggleButton.styled\";\n\nexport default function ToggleButton({ isActive, onClick }) {\n  return (\n    <StyledToggleButton onClick={onClick} isActive={isActive}>\n      {isActive ? \"▲\" : \"▼\"} {/* Можете використовувати іконки чи інший текст */}\n    </StyledToggleButton>\n  );\n}\n","// src/components/InteractiveContent/RevealCard/RevealCard.js\nimport React, { useState } from \"react\";\nimport { StyledRevealCard, CardContent, CardTitle } from \"./RevealCard.styled\";\nimport ToggleButton from \"../../Common/ToggleButton/ToggleButton\"; // Переконайтеся, що ToggleButton існує\n// import DOMPurify from 'dompurify'; // Розкоментуйте, якщо використовуєте DOMPurify\n\nexport default function RevealCard({ cardData }) {\n  const [isRevealed, setIsRevealed] = useState(false);\n\n  const toggleReveal = () => setIsRevealed(!isRevealed);\n\n  // Функція для безпечного рендерингу HTML\n  const renderHtmlContent = htmlString => {\n    // Якщо ви використовуєте DOMPurify, розкоментуйте рядок нижче\n    // return { __html: DOMPurify.sanitize(htmlString) };\n    return { __html: htmlString };\n  };\n\n  return (\n    <StyledRevealCard>\n      {/* Застосовуємо dangerouslySetInnerHTML для CardTitle, якщо він може містити HTML */}\n      <CardTitle onClick={toggleReveal}>\n        {cardData.emoji}\n        <span dangerouslySetInnerHTML={renderHtmlContent(cardData.title)} />\n        <ToggleButton isActive={isRevealed} onClick={toggleReveal} />\n      </CardTitle>\n      {isRevealed && (\n        // Застосовуємо dangerouslySetInnerHTML для CardContent, оскільки він містить HTML\n        <CardContent dangerouslySetInnerHTML={renderHtmlContent(cardData.content)} />\n      )}\n    </StyledRevealCard>\n  );\n}\n"],"names":["StyledCard","styled","section","_ref","theme","background","Card","children","_jsx","StyledQuizCard","div","_ref2","borderColor","QuizQuestion","h4","_ref3","color","QuizOptionsList","ul","_ref4","QuizOptionItem","li","_ref5","_ref6","_ref7","_ref8","hoverBg","props","isSelected","accentBg","accentColor","buttonColor","showFeedback","isCorrectOption","successBg","successColor","successText","dangerBg","dangerColor","dangerText","QuizToggleIcon","span","_ref9","QuizCard","quizData","showOptions","setShowOptions","useState","selectedAnswerIndex","setSelectedAnswerIndex","_jsxs","onClick","toggleOptions","question","isActive","options","map","option","index","handleOptionClick","isCorrect","text","Container","NoSermonMessage","h2","p","MetaContainer","MetaItem","DescriptionText","SermonMetaInfo","speaker","date","book","description","SermonDisplayContainer","SermonTitleWrapper","mode","gradientStart","gradientEnd","MainContentWrapper","main","SermonTextWrapper","StyledParagraph","RevealCardsGrid","sermonData","title","sections","type","React","SectionHeading","as","subtitle","size","content","paragraph","pIndex","dangerouslySetInnerHTML","htmlString","__html","id","cards","card","RevealCard","cardData","Sermons","selectedSermon","setSelectedSermon","useSermons","sermonId","categoryKey","sermonsContent","hasOwnProperty","sermonsArray","Array","isArray","length","foundSermon","find","sermon","getSermonDataById","useEffect","firstSermonId","SermonDisplay","SermonsPage","StyledHeading","h3","fontSizes","xlarge","large","StyledRevealCard","borderRadius","medium","shadows","small","CardTitle","accentBgHover","_ref0","_ref1","CardContent","_ref10","_ref11","_ref12","_ref13","colorSecondary","_ref14","StyledToggleButton","button","navActive","ToggleButton","isRevealed","setIsRevealed","toggleReveal","renderHtmlContent","emoji"],"sourceRoot":""}